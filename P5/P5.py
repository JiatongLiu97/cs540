{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d13e60aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "import numpy as np\n",
    "# %matplotlib inline\n",
    "import copy\n",
    "import math\n",
    "import heapq\n",
    "\n",
    "'''\n",
    "The below script is based on a 55 * 57 maze. \n",
    "Todo:\n",
    "\t1. Plot the maze and solution in the required format.\n",
    "\t2. Implement DFS algorithm. (I've given you the BFS below)\n",
    "\t3. Implement A* with Euclidean distance. (I've given you the one with Manhattan distance)\n",
    "\n",
    "'''\n",
    "\n",
    "\n",
    "\n",
    "width, height = 47, 48\n",
    "X, Y = 14, 2\n",
    "\n",
    "ori_img = mpimg.imread('47 by 48 orthogonal maze.png')\n",
    "img = ori_img[:,:,0]\n",
    "\n",
    "class Cell:\n",
    "    def __init__(self, i, j):\n",
    "        self.i = i\n",
    "        self.j = j\n",
    "        self.succ = ''\n",
    "        self.action = ''  # which action the parent takes to get this cell\n",
    "cells = [[Cell(i,j) for j in range(width)] for i in range(height)]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6e353f0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "M = np.zeros([height*2+1, width*3+1]) # space\n",
    "\n",
    "for h in range(height*2+1):\n",
    "    for w in range(width*3+1):\n",
    "        if (h%2==0) and (w%3==0):\n",
    "            M[h,w]=1 # +\n",
    "        if (h%2==0) and (w%3!=0):\n",
    "            i = int(         h/2 )\n",
    "            j = int(np.floor(w/3))\n",
    "            if np.sum(img[16*i+ 0:16*i+ 2, 16*j+ 2:16*j+16]) == 0:\n",
    "                M[h,w]=2 # -\n",
    "        if (h%2!=0) and (w%3==0):\n",
    "            i = int(np.floor(h/2))\n",
    "            j = int(         w/3 )\n",
    "            if np.sum(img[16*i+ 2:16*i+16, 16*j+ 0:16*j+ 2]) == 0:\n",
    "                M[h,w]=3 # |\n",
    "\n",
    "f = open('#1 plot_maze.txt','a')\n",
    "f.write('##1: \\n')\n",
    "for h in range(height*2+1):\n",
    "    for w in range(width*3+1):\n",
    "        if M[h,w]==0:\n",
    "            f.write(' ')\n",
    "        if M[h,w]==1:\n",
    "            f.write('+')\n",
    "        if M[h,w]==2:\n",
    "            f.write('-')\n",
    "        if M[h,w]==3:\n",
    "            f.write('|')\n",
    "    f.write('\\n')\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d31a1bf4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['DR', 'LR', 'LR', 'DL', 'DR', 'DL', 'DR', 'DL', 'DR', 'DL', 'DR', 'L', 'DR', 'LR', 'LR', 'DL', 'D', 'DR', 'LR', 'DL', 'R', 'LR', 'LR', 'ULR', 'DLR', 'DLR', 'DLR', 'LR', 'DL', 'R', 'DL', 'R', 'DL', 'R', 'DLR', 'DL', 'DR', 'LR', 'LR', 'LR', 'DL', 'DR', 'LR', 'LR', 'DL', 'R', 'DL'], ['UR', 'LR', 'DL', 'UR', 'UL', 'UR', 'UL', 'UDR', 'UL', 'UD', 'UDR', 'DLR', 'UL', 'DR', 'DLR', 'ULR', 'UL', 'UR', 'DL', 'UR', 'LR', 'DL', 'DR', 'LR', 'UL', 'UD', 'UR', 'DL', 'U', 'DR', 'ULR', 'DL', 'UDR', 'DL', 'U', 'UD', 'UD', 'DR', 'LR', 'LR', 'UDL', 'UR', 'LR', 'DL', 'UR', 'LR', 'UL'], ['DR', 'DL', 'UD', 'DR', 'DL', 'R', 'DL', 'U', 'DR', 'UL', 'U', 'UD', 'R', 'UL', 'UR', 'DL', 'DR', 'LR', 'UDL', 'DR', 'DL', 'UD', 'UD', 'DR', 'DL', 'UD', 'D', 'UR', 'DL', 'UD', 'DR', 'UL', 'U', 'UDR', 'DLR', 'UL', 'UD', 'UR', 'DL', 'R', 'ULR', 'LR', 'DL', 'UDR', 'DL', 'DR', 'DL'], ['UD', 'UD', 'UR', 'UL', 'UR', 'DLR', 'UDL', 'DR', 'UL', 'DR', 'DL', 'UR', 'LR', 'LR', 'L', 'UD', 'U', 'DR', 'UL', 'UD', 'UR', 'ULR', 'UL', 'U', 'UR', 'UL', 'UR', 'DL', 'UR', 'UL', 'UR', 'LR', 'DLR', 'UL', 'UD', 'R', 'UDL', 'D', 'UR', 'LR', 'DL', 'D', 'UR', 'UL', 'UD', 'UD', 'UD'], ['UD', 'UD', 'DR', 'DL', 'R', 'UL', 'U', 'UR', 'LR', 'UL', 'UR', 'DL', 'DR', 'LR', 'LR', 'ULR', 'LR', 'UL', 'DR', 'UL', 'DR', 'LR', 'LR', 'LR', 'DLR', 'LR', 'DLR', 'UL', 'D', 'DR', 'DL', 'R', 'UL', 'R', 'ULR', 'LR', 'UL', 'UR', 'LR', 'LR', 'UL', 'UDR', 'LR', 'DL', 'UR', 'UL', 'UD'], ['UD', 'UDR', 'UL', 'UR', 'LR', 'DLR', 'DL', 'D', 'DR', 'DL', 'DR', 'ULR', 'UL', 'DR', 'LR', 'LR', 'DLR', 'LR', 'UL', 'D', 'UD', 'DR', 'LR', 'LR', 'UL', 'DR', 'ULR', 'LR', 'UDL', 'UD', 'UR', 'DL', 'R', 'DLR', 'L', 'DR', 'LR', 'DL', 'D', 'DR', 'DL', 'UD', 'R', 'UL', 'DR', 'DL', 'UD'], ['UD', 'U', 'DR', 'LR', 'DLR', 'UL', 'UR', 'UL', 'UD', 'UD', 'UR', 'LR', 'DL', 'UR', 'DLR', 'DL', 'UR', 'LR', 'LR', 'UL', 'UD', 'U', 'DR', 'LR', 'LR', 'ULR', 'DLR', 'L', 'UR', 'UL', 'R', 'ULR', 'DL', 'UR', 'DL', 'UD', 'D', 'UD', 'UD', 'UD', 'UD', 'UR', 'DLR', 'LR', 'UL', 'UD', 'U'], ['UR', 'DL', 'UR', 'DL', 'UD', 'DR', 'DL', 'DR', 'UL', 'UR', 'LR', 'DL', 'UR', 'DL', 'U', 'UR', 'LR', 'LR', 'LR', 'LR', 'UL', 'DR', 'UL', 'D', 'DR', 'DL', 'UD', 'DR', 'DL', 'D', 'DR', 'DL', 'UD', 'DR', 'UL', 'UD', 'UR', 'UL', 'UR', 'UDL', 'UDR', 'LR', 'UL', 'DR', 'DL', 'UR', 'DL'], ['D', 'UR', 'DL', 'UD', 'UR', 'UL', 'UD', 'UD', 'DR', 'DLR', 'L', 'UD', 'DR', 'UL', 'DR', 'LR', 'LR', 'LR', 'DL', 'DR', 'L', 'UR', 'DL', 'UD', 'UD', 'UR', 'UL', 'UD', 'UD', 'UR', 'UL', 'UD', 'UDR', 'ULR', 'DL', 'UD', 'R', 'LR', 'LR', 'UL', 'UR', 'DL', 'DR', 'UL', 'UR', 'L', 'UD'], ['UD', 'DR', 'UL', 'UD', 'D', 'DR', 'UL', 'UR', 'UL', 'UR', 'DL', 'UD', 'UD', 'D', 'UD', 'R', 'DL', 'D', 'UR', 'ULR', 'DL', 'R', 'UDL', 'UD', 'UD', 'R', 'DL', 'UD', 'UR', 'DLR', 'DL', 'UR', 'UL', 'R', 'UL', 'UD', 'DR', 'LR', 'DLR', 'DL', 'R', 'UDLR', 'UL', 'DR', 'LR', 'LR', 'UDL'], ['UD', 'UR', 'DL', 'UR', 'UDL', 'UD', 'DR', 'DL', 'R', 'LR', 'UDL', 'UD', 'UDR', 'UL', 'UR', 'DL', 'UD', 'UD', 'DR', 'L', 'UR', 'DL', 'UDR', 'UL', 'UR', 'DL', 'UR', 'UL', 'R', 'UL', 'UD', 'DR', 'DL', 'DR', 'LR', 'UL', 'UR', 'DL', 'UD', 'UR', 'LR', 'UL', 'DR', 'UDL', 'DR', 'DL', 'U'], ['UR', 'LR', 'UL', 'DR', 'UL', 'U', 'UD', 'UD', 'DR', 'LR', 'UL', 'UD', 'UD', 'DR', 'LR', 'UL', 'UR', 'UDLR', 'ULR', 'LR', 'DL', 'UD', 'UD', 'DR', 'L', 'UR', 'LR', 'LR', 'DLR', 'L', 'UDR', 'UL', 'UD', 'UDR', 'LR', 'LR', 'DL', 'UD', 'UD', 'DR', 'DL', 'D', 'UD', 'UD', 'U', 'UR', 'DL'], ['DR', 'DLR', 'L', 'UDR', 'DLR', 'DL', 'UD', 'UR', 'UL', 'DR', 'DL', 'UR', 'UDL', 'UD', 'R', 'DLR', 'LR', 'UL', 'DR', 'DL', 'UD', 'UD', 'UR', 'UL', 'DR', 'LR', 'LR', 'DL', 'UR', 'LR', 'ULR', 'DL', 'U', 'UD', 'DR', 'DL', 'UD', 'UD', 'UD', 'UD', 'UDR', 'UL', 'UD', 'UR', 'DLR', 'DL', 'UD'], ['UD', 'UR', 'LR', 'UL', 'UD', 'UD', 'UD', 'D', 'DR', 'UL', 'UR', 'LR', 'UL', 'UR', 'LR', 'UL', 'DR', 'LR', 'UL', 'UR', 'UL', 'UR', 'LR', 'DL', 'U', 'DR', 'LR', 'UL', 'DR', 'LR', 'DL', 'UD', 'DR', 'UL', 'UD', 'UR', 'UL', 'UD', 'UD', 'UD', 'UDR', 'DL', 'UD', 'R', 'UL', 'UD', 'UD'], ['UR', 'LR', 'DL', 'DR', 'UL', 'UR', 'UL', 'UDR', 'ULR', 'DL', 'R', 'LR', 'DL', 'R', 'LR', 'DL', 'UR', 'DLR', 'LR', 'LR', 'LR', 'DL', 'D', 'UR', 'LR', 'UL', 'R', 'LR', 'UDL', 'DR', 'UL', 'U', 'UD', 'D', 'UR', 'LR', 'DL', 'UD', 'UD', 'U', 'UD', 'U', 'UR', 'LR', 'DL', 'UD', 'UD'], ['DR', 'DL', 'UD', 'U', 'DR', 'DL', 'DR', 'UL', 'D', 'UR', 'LR', 'LR', 'UL', 'DR', 'DL', 'UR', 'DL', 'UD', 'DR', 'LR', 'DL', 'UR', 'ULR', 'LR', 'DL', 'R', 'DL', 'DR', 'UL', 'UD', 'DR', 'DL', 'UD', 'UDR', 'LR', 'DL', 'UD', 'UD', 'UR', 'LR', 'UL', 'DR', 'DL', 'DR', 'UL', 'UR', 'UDL'], ['UD', 'UD', 'UD', 'DR', 'UL', 'UD', 'UDR', 'LR', 'UDLR', 'LR', 'LR', 'L', 'DR', 'UDL', 'UR', 'DL', 'UR', 'UL', 'UD', 'DR', 'ULR', 'LR', 'DL', 'D', 'UDR', 'LR', 'UDL', 'UR', 'L', 'UD', 'UD', 'UR', 'UL', 'UR', 'DL', 'U', 'UD', 'UR', 'DL', 'DR', 'DL', 'U', 'UD', 'UDR', 'LR', 'DL', 'U'], ['UD', 'UDR', 'UL', 'UD', 'DR', 'UL', 'UD', 'D', 'UD', 'DR', 'DL', 'DR', 'UL', 'U', 'DR', 'ULR', 'DL', 'DR', 'UL', 'UR', 'DL', 'D', 'UD', 'UD', 'UR', 'DL', 'U', 'DR', 'DL', 'UD', 'UR', 'DL', 'DR', 'LR', 'UL', 'DR', 'UL', 'R', 'UL', 'UD', 'UD', 'DR', 'UL', 'UR', 'DL', 'UR', 'DL'], ['UD', 'UR', 'LR', 'UL', 'UR', 'DL', 'UD', 'UD', 'UR', 'UL', 'UR', 'UL', 'DR', 'DL', 'UR', 'DL', 'UR', 'ULR', 'DL', 'DR', 'UL', 'UD', 'UD', 'UD', 'DR', 'ULR', 'DL', 'UD', 'UD', 'UR', 'DL', 'UD', 'UR', 'DLR', 'DL', 'UDR', 'LR', 'DL', 'DR', 'UL', 'UR', 'ULR', 'LR', 'DL', 'UR', 'DL', 'UD'], ['UD', 'DR', 'DL', 'DR', 'LR', 'UDL', 'UD', 'UR', 'DL', 'DR', 'DL', 'DR', 'UL', 'UR', 'LR', 'UL', 'DR', 'L', 'UD', 'UR', 'DL', 'UR', 'ULR', 'UL', 'UR', 'DL', 'UD', 'UD', 'UD', 'DR', 'UDL', 'UR', 'DL', 'UD', 'UR', 'UL', 'R', 'UL', 'UD', 'DR', 'DL', 'DR', 'DLR', 'UL', 'R', 'UDL', 'UD'], ['U', 'UD', 'UD', 'U', 'DR', 'UL', 'UD', 'DR', 'UDLR', 'UL', 'U', 'UD', 'DR', 'LR', 'DL', 'D', 'UD', 'DR', 'UL', 'R', 'UL', 'DR', 'LR', 'DL', 'DR', 'UL', 'UD', 'U', 'UR', 'UL', 'UR', 'DL', 'UD', 'U', 'DR', 'DL', 'DR', 'DL', 'UD', 'UD', 'UD', 'U', 'UD', 'DR', 'DL', 'UD', 'UD'], ['DR', 'UL', 'UR', 'DL', 'UR', 'DL', 'UDR', 'UL', 'U', 'DR', 'DL', 'UR', 'UDL', 'D', 'UD', 'UDR', 'UL', 'UR', 'LR', 'LR', 'DL', 'UR', 'DL', 'UD', 'UDR', 'DL', 'UR', 'DLR', 'LR', 'DL', 'DR', 'UL', 'UR', 'LR', 'UL', 'UD', 'UD', 'UD', 'UD', 'UD', 'UR', 'DL', 'UD', 'UD', 'UR', 'UL', 'UD'], ['UD', 'DR', 'DL', 'UD', 'DR', 'UL', 'UD', 'DR', 'LR', 'UL', 'UR', 'LR', 'UDL', 'UR', 'UL', 'UR', 'LR', 'LR', 'DL', 'DR', 'UL', 'DR', 'UDL', 'UD', 'U', 'UD', 'D', 'UR', 'DL', 'UR', 'ULR', 'DL', 'DR', 'L', 'DR', 'UL', 'UD', 'UD', 'UD', 'UR', 'DL', 'UD', 'U', 'UD', 'DR', 'LR', 'UDL'], ['UR', 'UL', 'UD', 'UDR', 'UL', 'D', 'UD', 'UR', 'DL', 'DR', 'DL', 'DR', 'UL', 'D', 'DR', 'DL', 'DR', 'DL', 'UD', 'UD', 'DR', 'UL', 'U', 'UR', 'DL', 'UD', 'UR', 'DLR', 'UDL', 'R', 'DL', 'UD', 'UDR', 'DL', 'UR', 'LR', 'UL', 'UD', 'UR', 'LR', 'UL', 'UD', 'DR', 'UL', 'UR', 'DL', 'UD'], ['D', 'DR', 'UL', 'UR', 'DL', 'UD', 'UD', 'D', 'UR', 'UL', 'UD', 'UD', 'DR', 'ULR', 'UDL', 'UR', 'UL', 'UR', 'UL', 'UD', 'UD', 'DR', 'LR', 'DLR', 'UL', 'UD', 'R', 'UL', 'UR', 'DL', 'UD', 'UDR', 'UL', 'UD', 'DR', 'DL', 'DR', 'UDL', 'R', 'LR', 'LR', 'ULR', 'UL', 'DR', 'LR', 'UL', 'UD'], ['UDR', 'UL', 'DR', 'DL', 'UD', 'UR', 'UL', 'UDR', 'LR', 'DL', 'UD', 'U', 'UR', 'L', 'UR', 'LR', 'DL', 'R', 'LR', 'ULR', 'UL', 'UD', 'R', 'UL', 'DR', 'UL', 'DR', 'LR', 'DL', 'UR', 'UL', 'U', 'DR', 'UL', 'UD', 'U', 'UD', 'U', 'DR', 'LR', 'LR', 'LR', 'LR', 'UL', 'DR', 'DL', 'UD'], ['UR', 'LR', 'UL', 'U', 'UD', 'DR', 'DLR', 'UL', 'R', 'UL', 'UR', 'DLR', 'L', 'DR', 'LR', 'DL', 'UD', 'DR', 'LR', 'DLR', 'DL', 'UR', 'DL', 'DR', 'ULR', 'L', 'UR', 'DL', 'UR', 'DL', 'R', 'DLR', 'UDL', 'D', 'UDR', 'DL', 'UR', 'LR', 'UL', 'R', 'DL', 'R', 'DLR', 'LR', 'UL', 'U', 'UD'], ['D', 'DR', 'LR', 'LR', 'UL', 'UD', 'UR', 'DL', 'DR', 'DLR', 'L', 'UR', 'DL', 'UR', 'DL', 'UR', 'UDL', 'UR', 'DL', 'UD', 'UR', 'L', 'UD', 'UD', 'DR', 'LR', 'DL', 'UR', 'DL', 'UD', 'DR', 'UL', 'UD', 'UR', 'UL', 'UR', 'DLR', 'LR', 'DL', 'DR', 'UL', 'DR', 'UL', 'DR', 'LR', 'DL', 'UD'], ['UD', 'UR', 'LR', 'DL', 'DR', 'UL', 'DR', 'ULR', 'UL', 'UR', 'LR', 'DL', 'UD', 'D', 'UD', 'D', 'UR', 'LR', 'UL', 'UDR', 'LR', 'LR', 'UDLR', 'UL', 'UR', 'DL', 'UR', 'LR', 'UL', 'UD', 'U', 'DR', 'UDLR', 'LR', 'LR', 'LR', 'ULR', 'L', 'UD', 'UDR', 'LR', 'UL', 'DR', 'UL', 'D', 'UR', 'UL'], ['UD', 'DR', 'LR', 'UL', 'UD', 'DR', 'ULR', 'L', 'DR', 'DL', 'DR', 'UL', 'UD', 'UDR', 'UDL', 'UR', 'DL', 'R', 'LR', 'UL', 'DR', 'LR', 'UL', 'DR', 'LR', 'UL', 'DR', 'DL', 'D', 'UD', 'DR', 'UL', 'UD', 'R', 'DL', 'R', 'LR', 'DL', 'UD', 'UR', 'DL', 'D', 'UD', 'DR', 'ULR', 'LR', 'DL'], ['UD', 'UDR', 'L', 'DR', 'UL', 'UR', 'DL', 'DR', 'UL', 'UD', 'UR', 'DL', 'UD', 'U', 'UR', 'LR', 'ULR', 'LR', 'DL', 'DR', 'UL', 'DR', 'DL', 'UDR', 'DL', 'DR', 'UL', 'UD', 'UDR', 'UL', 'UDR', 'L', 'UR', 'LR', 'UL', 'DR', 'DL', 'UD', 'UDR', 'DL', 'UR', 'UDL', 'UR', 'UL', 'DR', 'DLR', 'UL'], ['UD', 'UR', 'DL', 'UD', 'R', 'LR', 'UL', 'UR', 'DL', 'UR', 'LR', 'UL', 'UR', 'LR', 'DL', 'DR', 'LR', 'DL', 'U', 'UR', 'DL', 'UD', 'U', 'UD', 'UD', 'UR', 'L', 'UD', 'UDR', 'DL', 'U', 'DR', 'LR', 'LR', 'DLR', 'UDL', 'UD', 'UR', 'UL', 'UR', 'LR', 'UDL', 'DR', 'DL', 'UD', 'UR', 'L'], ['UDR', 'DLR', 'UL', 'UDR', 'LR', 'LR', 'DL', 'D', 'UD', 'DR', 'LR', 'LR', 'DL', 'D', 'UD', 'UD', 'D', 'UR', 'LR', 'DL', 'UD', 'UD', 'DR', 'UL', 'UR', 'LR', 'DL', 'UD', 'UD', 'UR', 'LR', 'UL', 'DR', 'DL', 'UD', 'UD', 'UD', 'DR', 'DL', 'DR', 'L', 'UD', 'UD', 'UD', 'UD', 'DR', 'DL'], ['UD', 'UD', 'DR', 'UL', 'DR', 'L', 'UR', 'UL', 'UD', 'UR', 'DL', 'D', 'UR', 'UDL', 'UR', 'UL', 'UR', 'LR', 'DL', 'UD', 'UR', 'UL', 'UR', 'DL', 'DR', 'DL', 'UD', 'UD', 'UD', 'DR', 'DLR', 'DL', 'UD', 'UD', 'UD', 'U', 'UD', 'U', 'UD', 'UR', 'LR', 'UDL', 'UD', 'UR', 'ULR', 'UL', 'UD'], ['UD', 'UD', 'UR', 'DL', 'UD', 'DR', 'DL', 'D', 'UR', 'DL', 'UR', 'ULR', 'DL', 'UR', 'DL', 'DR', 'LR', 'LR', 'ULR', 'ULR', 'LR', 'LR', 'DL', 'UD', 'UD', 'UD', 'UD', 'UD', 'UR', 'UL', 'U', 'UD', 'UD', 'UR', 'ULR', 'DL', 'UR', 'LR', 'UDL', 'DR', 'DL', 'U', 'UD', 'DR', 'LR', 'LR', 'UL'], ['UD', 'UDR', 'DL', 'UD', 'UD', 'UD', 'UR', 'ULR', 'L', 'UR', 'LR', 'LR', 'UL', 'R', 'ULR', 'UDL', 'DR', 'LR', 'DL', 'DR', 'LR', 'DL', 'UD', 'UR', 'UL', 'UD', 'UD', 'UD', 'D', 'DR', 'LR', 'UL', 'U', 'DR', 'DL', 'UR', 'LR', 'L', 'UD', 'UD', 'UD', 'DR', 'UL', 'UD', 'D', 'DR', 'DL'], ['UD', 'UD', 'UD', 'UR', 'UL', 'UR', 'LR', 'LR', 'DL', 'DR', 'LR', 'DL', 'R', 'LR', 'LR', 'ULR', 'UL', 'D', 'UR', 'UL', 'R', 'UDL', 'UR', 'LR', 'LR', 'UL', 'UR', 'UL', 'UD', 'UD', 'D', 'DR', 'LR', 'UL', 'UR', 'LR', 'DL', 'DR', 'UL', 'UD', 'UR', 'UL', 'D', 'UD', 'UR', 'UL', 'UD'], ['UD', 'UD', 'UR', 'L', 'DR', 'LR', 'DLR', 'DL', 'UD', 'UR', 'DL', 'UR', 'LR', 'LR', 'DL', 'DR', 'L', 'UR', 'DLR', 'LR', 'LR', 'UDL', 'R', 'DLR', 'DL', 'DR', 'DL', 'DR', 'UDL', 'UR', 'ULR', 'UDL', 'DR', 'DL', 'DR', 'DL', 'UD', 'UD', 'DR', 'UL', 'R', 'DL', 'UD', 'UR', 'LR', 'DL', 'UD'], ['U', 'UR', 'LR', 'LR', 'UDL', 'D', 'UD', 'U', 'UDR', 'L', 'UD', 'R', 'LR', 'LR', 'UDL', 'UR', 'LR', 'DL', 'UR', 'LR', 'DL', 'UR', 'LR', 'UL', 'UD', 'UD', 'UD', 'U', 'UD', 'DR', 'L', 'UR', 'UL', 'UD', 'UD', 'UR', 'UL', 'U', 'UD', 'DR', 'LR', 'UL', 'UDR', 'LR', 'LR', 'UL', 'UD'], ['DR', 'DL', 'DR', 'L', 'UR', 'UL', 'UR', 'DL', 'UDR', 'DL', 'UR', 'LR', 'LR', 'DL', 'UD', 'DR', 'LR', 'UL', 'DR', 'DL', 'UR', 'DL', 'DR', 'LR', 'UDLR', 'UL', 'UR', 'LR', 'ULR', 'UL', 'DR', 'DL', 'R', 'UDL', 'UR', 'LR', 'LR', 'LR', 'ULR', 'ULR', 'LR', 'DL', 'UR', 'DL', 'DR', 'DL', 'UD'], ['UD', 'UD', 'UDR', 'LR', 'DLR', 'DL', 'R', 'UL', 'UD', 'UR', 'LR', 'LR', 'DL', 'UD', 'UD', 'UDR', 'LR', 'DL', 'UD', 'UD', 'DR', 'UL', 'UD', 'D', 'UR', 'LR', 'LR', 'DL', 'DR', 'DL', 'UD', 'UR', 'DL', 'UR', 'DLR', 'LR', 'LR', 'DL', 'D', 'DR', 'DL', 'UR', 'L', 'UR', 'UL', 'UR', 'UDL'], ['UD', 'UD', 'UD', 'R', 'UL', 'UDR', 'DLR', 'DL', 'U', 'DR', 'DL', 'DR', 'UL', 'UD', 'UR', 'UL', 'DR', 'UDL', 'U', 'UD', 'UR', 'L', 'UD', 'UD', 'DR', 'LR', 'LR', 'ULR', 'UL', 'U', 'UD', 'D', 'UD', 'DR', 'UL', 'DR', 'LR', 'UL', 'UR', 'UL', 'UD', 'D', 'DR', 'DL', 'DR', 'LR', 'UL'], ['UD', 'UD', 'UD', 'DR', 'LR', 'UL', 'U', 'UD', 'DR', 'UL', 'UDR', 'ULR', 'LR', 'UL', 'DR', 'DL', 'UD', 'UD', 'DR', 'UL', 'DR', 'DLR', 'UL', 'UR', 'UL', 'DR', 'LR', 'LR', 'LR', 'DL', 'UD', 'UD', 'UD', 'UR', 'L', 'UDR', 'LR', 'LR', 'DL', 'DR', 'UL', 'UD', 'UD', 'UR', 'UDL', 'DR', 'DL'], ['UD', 'UR', 'UL', 'UD', 'DR', 'LR', 'DL', 'UR', 'UDL', 'DR', 'UL', 'DR', 'DL', 'DR', 'UL', 'UR', 'UDL', 'UR', 'ULR', 'DL', 'UD', 'U', 'DR', 'LR', 'LR', 'UL', 'DR', 'LR', 'DL', 'UR', 'UL', 'UDR', 'UL', 'DR', 'DL', 'UD', 'DR', 'L', 'UD', 'UR', 'LR', 'ULR', 'UL', 'D', 'UR', 'UL', 'UD'], ['UR', 'DL', 'DR', 'UL', 'UD', 'D', 'UD', 'R', 'UL', 'UR', 'DL', 'U', 'UD', 'U', 'DR', 'DL', 'U', 'DR', 'LR', 'UL', 'UD', 'DR', 'UL', 'R', 'LR', 'LR', 'ULR', 'DL', 'UR', 'L', 'DR', 'UL', 'D', 'UD', 'UR', 'UL', 'UR', 'DL', 'UR', 'LR', 'LR', 'DL', 'DR', 'UL', 'DR', 'DL', 'UD'], ['DR', 'UL', 'UR', 'L', 'UD', 'UD', 'UR', 'DL', 'DR', 'LR', 'ULR', 'LR', 'UL', 'DR', 'UL', 'UR', 'LR', 'UL', 'DR', 'DL', 'UD', 'UD', 'DR', 'DL', 'DR', 'DLR', 'L', 'UR', 'LR', 'DL', 'UR', 'LR', 'UDL', 'UD', 'DR', 'LR', 'DL', 'UR', 'DLR', 'LR', 'LR', 'UL', 'UD', 'DR', 'UL', 'UR', 'UL'], ['UR', 'DLR', 'LR', 'DLR', 'UL', 'UDR', 'LR', 'UL', 'UD', 'R', 'LR', 'LR', 'DL', 'UR', 'LR', 'DL', 'DR', 'DL', 'UD', 'UDR', 'UL', 'UR', 'UL', 'UD', 'UD', 'UR', 'DLR', 'LR', 'LR', 'UDL', 'DR', 'L', 'UD', 'UD', 'UR', 'DL', 'UR', 'DL', 'UR', 'DL', 'DR', 'LR', 'ULR', 'UL', 'R', 'DL', 'D'], ['R', 'UL', 'R', 'ULR', 'L', 'UR', 'LR', 'L', 'UR', 'LR', 'LR', 'LR', 'ULR', 'LR', 'L', 'UR', 'UL', 'UR', 'UL', 'UR', 'LR', 'LR', 'L', 'UD', 'UR', 'L', 'UR', 'LR', 'L', 'UR', 'ULR', 'LR', 'ULR', 'UL', 'R', 'ULR', 'L', 'UR', 'LR', 'UL', 'UR', 'LR', 'LR', 'LR', 'LR', 'ULR', 'UL']]\n"
     ]
    }
   ],
   "source": [
    "succ_matrx = []\n",
    "for i in range(height):\n",
    "    succ = []\n",
    "    for j in range(width):\n",
    "        s = ''\n",
    "        c1, c2 = i * 16 + 8, j * 16 + 8\n",
    "        if img[c1-8, c2] == 1: s += 'U'\n",
    "        if img[c1+8, c2] == 1: s += 'D'\n",
    "        if img[c1, c2-8] == 1: s += 'L'\n",
    "        if img[c1, c2+8] == 1: s += 'R'\n",
    "        cells[i][j].succ = s\n",
    "        succ.append(s)\n",
    "    succ_matrx.append(succ)\n",
    "print(succ_matrx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "524ea138",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ULR\n",
      "UD\n"
     ]
    }
   ],
   "source": [
    "outF = open(\"#2 successor_matrix.txt\", \"w\")\n",
    "for i in range(len(succ_matrx)):\n",
    "    for j in range(len(succ_matrx[i])):\n",
    "        outF.write(succ_matrx[i][j])\n",
    "        if j == len(succ_matrx[i]) - 1:\n",
    "            break\n",
    "        outF.write(\",\")\n",
    "    if i == len(succ_matrx) - 1:\n",
    "        break\n",
    "    outF.write(\"\\n\")\n",
    "outF.close()\n",
    "\n",
    "print(cells[0][23].succ)\n",
    "print(cells[47][23].succ)\n",
    "\n",
    "cells[0][23].succ = cells[0][23].succ.replace('U', '')\n",
    "cells[47][23].succ = cells[47][23].succ.replace('D', '')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3d54e722",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RDLLDDLUULLULLDRDDLDLLLLLDLLDRRDRDLDDDDDLLULDLDLDLDRRDDRURDRURURURDRDLDRDLLULDLDDRDLLULDLLDRDRURDDDRDRDDDDRRDDRUURRDRRDDRRRDDRRRUUULDDLUULURUUURRULURRDRRULULURRDRDDDDLDDDDRURRDDLLDDRRDRURDDDRRRRDLLDDDLULDDDDLUULLURURUUULULDDDDLULLLLDLLLDLDDRURDD\n",
      "[(0, 23), (0, 24), (1, 24), (1, 23), (1, 22), (2, 22), (3, 22), (3, 21), (2, 21), (1, 21), (1, 20), (1, 19), (0, 19), (0, 18), (0, 17), (1, 17), (1, 18), (2, 18), (3, 18), (3, 17), (4, 17), (4, 16), (4, 15), (4, 14), (4, 13), (4, 12), (5, 12), (5, 11), (5, 10), (6, 10), (6, 11), (6, 12), (7, 12), (7, 13), (8, 13), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12), (13, 11), (13, 10), (12, 10), (12, 9), (13, 9), (13, 8), (14, 8), (14, 7), (15, 7), (15, 6), (16, 6), (16, 7), (16, 8), (17, 8), (18, 8), (18, 9), (17, 9), (17, 10), (18, 10), (18, 11), (17, 11), (17, 12), (16, 12), (16, 13), (15, 13), (15, 14), (16, 14), (16, 15), (17, 15), (17, 14), (18, 14), (18, 15), (19, 15), (19, 14), (19, 13), (18, 13), (18, 12), (19, 12), (19, 11), (20, 11), (21, 11), (21, 12), (22, 12), (22, 11), (22, 10), (21, 10), (21, 9), (22, 9), (22, 8), (22, 7), (23, 7), (23, 8), (24, 8), (24, 9), (23, 9), (23, 10), (24, 10), (25, 10), (26, 10), (26, 11), (27, 11), (27, 12), (28, 12), (29, 12), (30, 12), (31, 12), (31, 13), (31, 14), (32, 14), (33, 14), (33, 15), (32, 15), (31, 15), (31, 16), (31, 17), (32, 17), (32, 18), (32, 19), (33, 19), (34, 19), (34, 20), (34, 21), (34, 22), (35, 22), (36, 22), (36, 23), (36, 24), (36, 25), (35, 25), (34, 25), (33, 25), (33, 24), (34, 24), (35, 24), (35, 23), (34, 23), (33, 23), (33, 22), (32, 22), (32, 23), (31, 23), (30, 23), (29, 23), (29, 24), (29, 25), (28, 25), (28, 24), (27, 24), (27, 25), (27, 26), (28, 26), (28, 27), (28, 28), (27, 28), (27, 27), (26, 27), (26, 26), (25, 26), (25, 27), (25, 28), (26, 28), (26, 29), (27, 29), (28, 29), (29, 29), (30, 29), (30, 28), (31, 28), (32, 28), (33, 28), (34, 28), (34, 29), (33, 29), (33, 30), (33, 31), (34, 31), (35, 31), (35, 30), (35, 29), (36, 29), (37, 29), (37, 30), (37, 31), (38, 31), (38, 32), (37, 32), (37, 33), (38, 33), (39, 33), (40, 33), (40, 34), (40, 35), (40, 36), (40, 37), (41, 37), (41, 36), (41, 35), (42, 35), (43, 35), (44, 35), (44, 34), (43, 34), (43, 33), (44, 33), (45, 33), (46, 33), (47, 33), (47, 32), (46, 32), (45, 32), (45, 31), (45, 30), (44, 30), (44, 31), (43, 31), (43, 32), (42, 32), (41, 32), (40, 32), (40, 31), (39, 31), (39, 30), (40, 30), (41, 30), (42, 30), (43, 30), (43, 29), (42, 29), (42, 28), (42, 27), (42, 26), (42, 25), (43, 25), (43, 24), (43, 23), (43, 22), (44, 22), (44, 21), (45, 21), (46, 21), (46, 22), (45, 22), (45, 23), (46, 23), (47, 23)]\n"
     ]
    }
   ],
   "source": [
    "searched_sq_bfs = [[0] * 47 for i in range(48)]\n",
    "# bfs\n",
    "visited = set()\n",
    "s1 = {(0,23)}\n",
    "s2 = set()\n",
    "while (47,23) not in visited:\n",
    "    for a in s1:\n",
    "        visited.add(a)\n",
    "        i, j = a[0], a[1]\n",
    "        searched_sq_bfs[i][j] = 1\n",
    "        succ = cells[i][j].succ\n",
    "        if 'U' in succ and (i-1,j) not in (s1 | s2 | visited): \n",
    "            s2.add((i-1,j))\n",
    "            cells[i-1][j].action = 'U'\n",
    "        if 'D' in succ and (i+1,j) not in (s1 | s2 | visited): \n",
    "            s2.add((i+1,j))\n",
    "            cells[i+1][j].action = 'D'\n",
    "        if 'L' in succ and (i,j-1) not in (s1 | s2 | visited): \n",
    "            s2.add((i,j-1))\n",
    "            cells[i][j-1].action = 'L'\n",
    "        if 'R' in succ and (i,j+1) not in (s1 | s2 | visited): \n",
    "            s2.add((i,j+1))\n",
    "            cells[i][j+1].action = 'R'     \n",
    "    s1 = s2\n",
    "    s2 = set()\n",
    "    \n",
    "cur = (47,23)\n",
    "s = ''\n",
    "seq = []\n",
    "while cur != (0,23):\n",
    "    seq.append(cur)\n",
    "    i, j = cur[0], cur[1]\n",
    "    t = cells[i][j].action\n",
    "    s += t\n",
    "    if t == 'U': cur = (i+1, j)\n",
    "    if t == 'D': cur = (i-1, j)\n",
    "    if t == 'L': cur = (i, j+1)\n",
    "    if t == 'R': cur = (i, j-1)\n",
    "seq.append(cur)\n",
    "action = s[::-1]\n",
    "seq = seq[::-1]\n",
    "\n",
    "print(action)\n",
    "print(seq)\n",
    "outF = open(\"#3 action_sequence.txt\", \"w\")\n",
    "outF.write(action)\n",
    "outF.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5c720a81",
   "metadata": {},
   "outputs": [],
   "source": [
    "for k in range(len(action)):\n",
    "    i,j = seq[k]\n",
    "    a = action[k]\n",
    "    M[2*i+1,3*j+1:3*j+3]=4\n",
    "    if a == 'U': \n",
    "        M[2*i+0,3*j+1:3*j+3]=4\n",
    "    if a == 'D': \n",
    "        M[2*i+2,3*j+1:3*j+3]=4\n",
    "    if a == 'L': \n",
    "        M[2*i+1,3*j+0]=4\n",
    "    if a == 'R': \n",
    "        M[2*i+1,3*j+3]=4\n",
    "i,j = seq[k+1]\n",
    "M[2*i+1,3*j+1:3*j+3]=4\n",
    "\n",
    "M[ 0,3*int((width-1)/2)+1:3*int((width-1)/2)+3]=4\n",
    "M[-1,3*int((width-1)/2)+1:3*int((width-1)/2)+3]=4\n",
    "\n",
    "f = open('#4 plot_maze_sol.txt','a')\n",
    "f.write('##4: \\n')\n",
    "for h in range(height*2+1):\n",
    "    for w in range(width*3+1):\n",
    "        if M[h,w]==0:\n",
    "            f.write(' ')\n",
    "        if M[h,w]==1:\n",
    "            f.write('+')\n",
    "        if M[h,w]==2:\n",
    "            f.write('-')\n",
    "        if M[h,w]==3:\n",
    "            f.write('|')\n",
    "        if M[h,w]==4:\n",
    "            f.write('@')\n",
    "    f.write('\\n')\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "338d7e55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]]\n"
     ]
    }
   ],
   "source": [
    "print(searched_sq_bfs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bee07fdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "outF = open(\"#5 squares_searched_by_BFS.txt\", \"w\")\n",
    "for i in range(len(searched_sq_bfs)):\n",
    "    for j in range(len(searched_sq_bfs[i])):\n",
    "        outF.write(str(searched_sq_bfs[i][j]))\n",
    "        if j == len(searched_sq_bfs[i]) - 1:\n",
    "            break\n",
    "        outF.write(\",\")\n",
    "    if i == len(searched_sq_bfs) - 1:\n",
    "        break\n",
    "    outF.write(\"\\n\")\n",
    "outF.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0ac37e7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RDLLDDLUULLULLDRDDLDLLLLLDLLDRRDRDLDDDDDLLULDLDLDLDRRDDRURDRURURURDRDLDRDLLULDLDDRDLLULDLLDRDRURDDDRDRDDDDRRDDRUURRDRRDDRRRDDRRRUUULDDLUULURUUURRULURRDRRULULURRDRDDDDLDDDDRURRDDLLDDRRDRURDDDRRRRDLLDDDLULDDDDLUULLURURUUULULDDDDLULLLLDLLLDLDDRURDD\n",
      "[(0, 23), (0, 24), (1, 24), (1, 23), (1, 22), (2, 22), (3, 22), (3, 21), (2, 21), (1, 21), (1, 20), (1, 19), (0, 19), (0, 18), (0, 17), (1, 17), (1, 18), (2, 18), (3, 18), (3, 17), (4, 17), (4, 16), (4, 15), (4, 14), (4, 13), (4, 12), (5, 12), (5, 11), (5, 10), (6, 10), (6, 11), (6, 12), (7, 12), (7, 13), (8, 13), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12), (13, 11), (13, 10), (12, 10), (12, 9), (13, 9), (13, 8), (14, 8), (14, 7), (15, 7), (15, 6), (16, 6), (16, 7), (16, 8), (17, 8), (18, 8), (18, 9), (17, 9), (17, 10), (18, 10), (18, 11), (17, 11), (17, 12), (16, 12), (16, 13), (15, 13), (15, 14), (16, 14), (16, 15), (17, 15), (17, 14), (18, 14), (18, 15), (19, 15), (19, 14), (19, 13), (18, 13), (18, 12), (19, 12), (19, 11), (20, 11), (21, 11), (21, 12), (22, 12), (22, 11), (22, 10), (21, 10), (21, 9), (22, 9), (22, 8), (22, 7), (23, 7), (23, 8), (24, 8), (24, 9), (23, 9), (23, 10), (24, 10), (25, 10), (26, 10), (26, 11), (27, 11), (27, 12), (28, 12), (29, 12), (30, 12), (31, 12), (31, 13), (31, 14), (32, 14), (33, 14), (33, 15), (32, 15), (31, 15), (31, 16), (31, 17), (32, 17), (32, 18), (32, 19), (33, 19), (34, 19), (34, 20), (34, 21), (34, 22), (35, 22), (36, 22), (36, 23), (36, 24), (36, 25), (35, 25), (34, 25), (33, 25), (33, 24), (34, 24), (35, 24), (35, 23), (34, 23), (33, 23), (33, 22), (32, 22), (32, 23), (31, 23), (30, 23), (29, 23), (29, 24), (29, 25), (28, 25), (28, 24), (27, 24), (27, 25), (27, 26), (28, 26), (28, 27), (28, 28), (27, 28), (27, 27), (26, 27), (26, 26), (25, 26), (25, 27), (25, 28), (26, 28), (26, 29), (27, 29), (28, 29), (29, 29), (30, 29), (30, 28), (31, 28), (32, 28), (33, 28), (34, 28), (34, 29), (33, 29), (33, 30), (33, 31), (34, 31), (35, 31), (35, 30), (35, 29), (36, 29), (37, 29), (37, 30), (37, 31), (38, 31), (38, 32), (37, 32), (37, 33), (38, 33), (39, 33), (40, 33), (40, 34), (40, 35), (40, 36), (40, 37), (41, 37), (41, 36), (41, 35), (42, 35), (43, 35), (44, 35), (44, 34), (43, 34), (43, 33), (44, 33), (45, 33), (46, 33), (47, 33), (47, 32), (46, 32), (45, 32), (45, 31), (45, 30), (44, 30), (44, 31), (43, 31), (43, 32), (42, 32), (41, 32), (40, 32), (40, 31), (39, 31), (39, 30), (40, 30), (41, 30), (42, 30), (43, 30), (43, 29), (42, 29), (42, 28), (42, 27), (42, 26), (42, 25), (43, 25), (43, 24), (43, 23), (43, 22), (44, 22), (44, 21), (45, 21), (46, 21), (46, 22), (45, 22), (45, 23), (46, 23), (47, 23)]\n"
     ]
    }
   ],
   "source": [
    "searched_sq_dfs = [[0] * 47 for i in range(48)]\n",
    "# dfs\n",
    "visited = []\n",
    "stack = [(0,23)]\n",
    "while (47,23) not in visited:\n",
    "    a = stack.pop()\n",
    "    visited.append(a)\n",
    "    i, j = a[0], a[1]\n",
    "    searched_sq_dfs[i][j] = 1\n",
    "    succ = cells[i][j].succ\n",
    "    if 'L' in succ and (i,j-1) not in (set(stack) | set(visited)):\n",
    "        stack.append((i,j-1))\n",
    "        cells[i][j-1].action = 'L'\n",
    "    if 'R' in succ and (i,j+1) not in (set(stack) | set(visited)): \n",
    "        stack.append((i,j+1))\n",
    "        cells[i][j+1].action = 'R'   \n",
    "    if 'U' in succ and (i-1,j) not in (set(stack) | set(visited)): \n",
    "        stack.append((i-1,j))\n",
    "        cells[i-1][j].action = 'U'\n",
    "    if 'D' in succ and (i+1,j) not in (set(stack) | set(visited)): \n",
    "        stack.append((i+1,j))\n",
    "        cells[i+1][j].action = 'D'\n",
    "    \n",
    "    \n",
    "cur = (47,23)\n",
    "s = ''\n",
    "seq = []\n",
    "while cur != (0,23):\n",
    "    seq.append(cur)\n",
    "    i, j = cur[0], cur[1]\n",
    "    t = cells[i][j].action\n",
    "    s += t\n",
    "    if t == 'U': cur = (i+1, j)\n",
    "    if t == 'D': cur = (i-1, j)\n",
    "    if t == 'L': cur = (i, j+1)\n",
    "    if t == 'R': cur = (i, j-1)\n",
    "seq.append(cur)\n",
    "action = s[::-1]\n",
    "seq = seq[::-1]\n",
    "\n",
    "print(action)\n",
    "print(seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cc72800b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n"
     ]
    }
   ],
   "source": [
    "print(searched_sq_dfs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9b251c8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "outF = open(\"#6 squares_searched_by_DFS.txt\", \"w\")\n",
    "for i in range(len(searched_sq_dfs)):\n",
    "    for j in range(len(searched_sq_dfs[i])):\n",
    "        outF.write(str(searched_sq_dfs[i][j]))\n",
    "        if j == len(searched_sq_dfs[i]) - 1:\n",
    "            break\n",
    "        outF.write(\",\")\n",
    "    if i == len(searched_sq_dfs) - 1:\n",
    "        break\n",
    "    outF.write(\"\\n\")\n",
    "outF.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fa0d579f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{(0, 0): 82, (1, 0): 81, (2, 0): 80, (3, 0): 79, (4, 0): 78, (5, 0): 77, (6, 0): 76, (7, 0): 75, (8, 0): 74, (9, 0): 73, (10, 0): 72, (11, 0): 71, (12, 0): 70, (13, 0): 69, (14, 0): 68, (15, 0): 67, (16, 0): 66, (17, 0): 65, (18, 0): 64, (19, 0): 63, (20, 0): 62, (21, 0): 61, (22, 0): 60, (23, 0): 59, (24, 0): 58, (25, 0): 57, (26, 0): 56, (27, 0): 55, (28, 0): 54, (29, 0): 53, (30, 0): 52, (31, 0): 51, (32, 0): 50, (33, 0): 49, (34, 0): 48, (35, 0): 47, (36, 0): 46, (37, 0): 45, (38, 0): 44, (39, 0): 43, (40, 0): 42, (41, 0): 41, (42, 0): 40, (43, 0): 39, (44, 0): 38, (45, 0): 37, (46, 0): 36, (47, 0): 35, (0, 1): 81, (1, 1): 80, (2, 1): 79, (3, 1): 78, (4, 1): 77, (5, 1): 76, (6, 1): 75, (7, 1): 74, (8, 1): 73, (9, 1): 72, (10, 1): 71, (11, 1): 70, (12, 1): 69, (13, 1): 68, (14, 1): 67, (15, 1): 66, (16, 1): 65, (17, 1): 64, (18, 1): 63, (19, 1): 62, (20, 1): 61, (21, 1): 60, (22, 1): 59, (23, 1): 58, (24, 1): 57, (25, 1): 56, (26, 1): 55, (27, 1): 54, (28, 1): 53, (29, 1): 52, (30, 1): 51, (31, 1): 50, (32, 1): 49, (33, 1): 48, (34, 1): 47, (35, 1): 46, (36, 1): 45, (37, 1): 44, (38, 1): 43, (39, 1): 42, (40, 1): 41, (41, 1): 40, (42, 1): 39, (43, 1): 38, (44, 1): 37, (45, 1): 36, (46, 1): 35, (47, 1): 34, (0, 2): 80, (1, 2): 79, (2, 2): 78, (3, 2): 77, (4, 2): 76, (5, 2): 75, (6, 2): 74, (7, 2): 73, (8, 2): 72, (9, 2): 71, (10, 2): 70, (11, 2): 69, (12, 2): 68, (13, 2): 67, (14, 2): 66, (15, 2): 65, (16, 2): 64, (17, 2): 63, (18, 2): 62, (19, 2): 61, (20, 2): 60, (21, 2): 59, (22, 2): 58, (23, 2): 57, (24, 2): 56, (25, 2): 55, (26, 2): 54, (27, 2): 53, (28, 2): 52, (29, 2): 51, (30, 2): 50, (31, 2): 49, (32, 2): 48, (33, 2): 47, (34, 2): 46, (35, 2): 45, (36, 2): 44, (37, 2): 43, (38, 2): 42, (39, 2): 41, (40, 2): 40, (41, 2): 39, (42, 2): 38, (43, 2): 37, (44, 2): 36, (45, 2): 35, (46, 2): 34, (47, 2): 33, (0, 3): 79, (1, 3): 78, (2, 3): 77, (3, 3): 76, (4, 3): 75, (5, 3): 74, (6, 3): 73, (7, 3): 72, (8, 3): 71, (9, 3): 70, (10, 3): 69, (11, 3): 68, (12, 3): 67, (13, 3): 66, (14, 3): 65, (15, 3): 64, (16, 3): 63, (17, 3): 62, (18, 3): 61, (19, 3): 60, (20, 3): 59, (21, 3): 58, (22, 3): 57, (23, 3): 56, (24, 3): 55, (25, 3): 54, (26, 3): 53, (27, 3): 52, (28, 3): 51, (29, 3): 50, (30, 3): 49, (31, 3): 48, (32, 3): 47, (33, 3): 46, (34, 3): 45, (35, 3): 44, (36, 3): 43, (37, 3): 42, (38, 3): 41, (39, 3): 40, (40, 3): 39, (41, 3): 38, (42, 3): 37, (43, 3): 36, (44, 3): 35, (45, 3): 34, (46, 3): 33, (47, 3): 32, (0, 4): 78, (1, 4): 77, (2, 4): 76, (3, 4): 75, (4, 4): 74, (5, 4): 73, (6, 4): 72, (7, 4): 71, (8, 4): 70, (9, 4): 69, (10, 4): 68, (11, 4): 67, (12, 4): 66, (13, 4): 65, (14, 4): 64, (15, 4): 63, (16, 4): 62, (17, 4): 61, (18, 4): 60, (19, 4): 59, (20, 4): 58, (21, 4): 57, (22, 4): 56, (23, 4): 55, (24, 4): 54, (25, 4): 53, (26, 4): 52, (27, 4): 51, (28, 4): 50, (29, 4): 49, (30, 4): 48, (31, 4): 47, (32, 4): 46, (33, 4): 45, (34, 4): 44, (35, 4): 43, (36, 4): 42, (37, 4): 41, (38, 4): 40, (39, 4): 39, (40, 4): 38, (41, 4): 37, (42, 4): 36, (43, 4): 35, (44, 4): 34, (45, 4): 33, (46, 4): 32, (47, 4): 31, (0, 5): 77, (1, 5): 76, (2, 5): 75, (3, 5): 74, (4, 5): 73, (5, 5): 72, (6, 5): 71, (7, 5): 70, (8, 5): 69, (9, 5): 68, (10, 5): 67, (11, 5): 66, (12, 5): 65, (13, 5): 64, (14, 5): 63, (15, 5): 62, (16, 5): 61, (17, 5): 60, (18, 5): 59, (19, 5): 58, (20, 5): 57, (21, 5): 56, (22, 5): 55, (23, 5): 54, (24, 5): 53, (25, 5): 52, (26, 5): 51, (27, 5): 50, (28, 5): 49, (29, 5): 48, (30, 5): 47, (31, 5): 46, (32, 5): 45, (33, 5): 44, (34, 5): 43, (35, 5): 42, (36, 5): 41, (37, 5): 40, (38, 5): 39, (39, 5): 38, (40, 5): 37, (41, 5): 36, (42, 5): 35, (43, 5): 34, (44, 5): 33, (45, 5): 32, (46, 5): 31, (47, 5): 30, (0, 6): 76, (1, 6): 75, (2, 6): 74, (3, 6): 73, (4, 6): 72, (5, 6): 71, (6, 6): 70, (7, 6): 69, (8, 6): 68, (9, 6): 67, (10, 6): 66, (11, 6): 65, (12, 6): 64, (13, 6): 63, (14, 6): 62, (15, 6): 61, (16, 6): 60, (17, 6): 59, (18, 6): 58, (19, 6): 57, (20, 6): 56, (21, 6): 55, (22, 6): 54, (23, 6): 53, (24, 6): 52, (25, 6): 51, (26, 6): 50, (27, 6): 49, (28, 6): 48, (29, 6): 47, (30, 6): 46, (31, 6): 45, (32, 6): 44, (33, 6): 43, (34, 6): 42, (35, 6): 41, (36, 6): 40, (37, 6): 39, (38, 6): 38, (39, 6): 37, (40, 6): 36, (41, 6): 35, (42, 6): 34, (43, 6): 33, (44, 6): 32, (45, 6): 31, (46, 6): 30, (47, 6): 29, (0, 7): 75, (1, 7): 74, (2, 7): 73, (3, 7): 72, (4, 7): 71, (5, 7): 70, (6, 7): 69, (7, 7): 68, (8, 7): 67, (9, 7): 66, (10, 7): 65, (11, 7): 64, (12, 7): 63, (13, 7): 62, (14, 7): 61, (15, 7): 60, (16, 7): 59, (17, 7): 58, (18, 7): 57, (19, 7): 56, (20, 7): 55, (21, 7): 54, (22, 7): 53, (23, 7): 52, (24, 7): 51, (25, 7): 50, (26, 7): 49, (27, 7): 48, (28, 7): 47, (29, 7): 46, (30, 7): 45, (31, 7): 44, (32, 7): 43, (33, 7): 42, (34, 7): 41, (35, 7): 40, (36, 7): 39, (37, 7): 38, (38, 7): 37, (39, 7): 36, (40, 7): 35, (41, 7): 34, (42, 7): 33, (43, 7): 32, (44, 7): 31, (45, 7): 30, (46, 7): 29, (47, 7): 28, (0, 8): 74, (1, 8): 73, (2, 8): 72, (3, 8): 71, (4, 8): 70, (5, 8): 69, (6, 8): 68, (7, 8): 67, (8, 8): 66, (9, 8): 65, (10, 8): 64, (11, 8): 63, (12, 8): 62, (13, 8): 61, (14, 8): 60, (15, 8): 59, (16, 8): 58, (17, 8): 57, (18, 8): 56, (19, 8): 55, (20, 8): 54, (21, 8): 53, (22, 8): 52, (23, 8): 51, (24, 8): 50, (25, 8): 49, (26, 8): 48, (27, 8): 47, (28, 8): 46, (29, 8): 45, (30, 8): 44, (31, 8): 43, (32, 8): 42, (33, 8): 41, (34, 8): 40, (35, 8): 39, (36, 8): 38, (37, 8): 37, (38, 8): 36, (39, 8): 35, (40, 8): 34, (41, 8): 33, (42, 8): 32, (43, 8): 31, (44, 8): 30, (45, 8): 29, (46, 8): 28, (47, 8): 27, (0, 9): 73, (1, 9): 72, (2, 9): 71, (3, 9): 70, (4, 9): 69, (5, 9): 68, (6, 9): 67, (7, 9): 66, (8, 9): 65, (9, 9): 64, (10, 9): 63, (11, 9): 62, (12, 9): 61, (13, 9): 60, (14, 9): 59, (15, 9): 58, (16, 9): 57, (17, 9): 56, (18, 9): 55, (19, 9): 54, (20, 9): 53, (21, 9): 52, (22, 9): 51, (23, 9): 50, (24, 9): 49, (25, 9): 48, (26, 9): 47, (27, 9): 46, (28, 9): 45, (29, 9): 44, (30, 9): 43, (31, 9): 42, (32, 9): 41, (33, 9): 40, (34, 9): 39, (35, 9): 38, (36, 9): 37, (37, 9): 36, (38, 9): 35, (39, 9): 34, (40, 9): 33, (41, 9): 32, (42, 9): 31, (43, 9): 30, (44, 9): 29, (45, 9): 28, (46, 9): 27, (47, 9): 26, (0, 10): 72, (1, 10): 71, (2, 10): 70, (3, 10): 69, (4, 10): 68, (5, 10): 67, (6, 10): 66, (7, 10): 65, (8, 10): 64, (9, 10): 63, (10, 10): 62, (11, 10): 61, (12, 10): 60, (13, 10): 59, (14, 10): 58, (15, 10): 57, (16, 10): 56, (17, 10): 55, (18, 10): 54, (19, 10): 53, (20, 10): 52, (21, 10): 51, (22, 10): 50, (23, 10): 49, (24, 10): 48, (25, 10): 47, (26, 10): 46, (27, 10): 45, (28, 10): 44, (29, 10): 43, (30, 10): 42, (31, 10): 41, (32, 10): 40, (33, 10): 39, (34, 10): 38, (35, 10): 37, (36, 10): 36, (37, 10): 35, (38, 10): 34, (39, 10): 33, (40, 10): 32, (41, 10): 31, (42, 10): 30, (43, 10): 29, (44, 10): 28, (45, 10): 27, (46, 10): 26, (47, 10): 25, (0, 11): 71, (1, 11): 70, (2, 11): 69, (3, 11): 68, (4, 11): 67, (5, 11): 66, (6, 11): 65, (7, 11): 64, (8, 11): 63, (9, 11): 62, (10, 11): 61, (11, 11): 60, (12, 11): 59, (13, 11): 58, (14, 11): 57, (15, 11): 56, (16, 11): 55, (17, 11): 54, (18, 11): 53, (19, 11): 52, (20, 11): 51, (21, 11): 50, (22, 11): 49, (23, 11): 48, (24, 11): 47, (25, 11): 46, (26, 11): 45, (27, 11): 44, (28, 11): 43, (29, 11): 42, (30, 11): 41, (31, 11): 40, (32, 11): 39, (33, 11): 38, (34, 11): 37, (35, 11): 36, (36, 11): 35, (37, 11): 34, (38, 11): 33, (39, 11): 32, (40, 11): 31, (41, 11): 30, (42, 11): 29, (43, 11): 28, (44, 11): 27, (45, 11): 26, (46, 11): 25, (47, 11): 24, (0, 12): 70, (1, 12): 69, (2, 12): 68, (3, 12): 67, (4, 12): 66, (5, 12): 65, (6, 12): 64, (7, 12): 63, (8, 12): 62, (9, 12): 61, (10, 12): 60, (11, 12): 59, (12, 12): 58, (13, 12): 57, (14, 12): 56, (15, 12): 55, (16, 12): 54, (17, 12): 53, (18, 12): 52, (19, 12): 51, (20, 12): 50, (21, 12): 49, (22, 12): 48, (23, 12): 47, (24, 12): 46, (25, 12): 45, (26, 12): 44, (27, 12): 43, (28, 12): 42, (29, 12): 41, (30, 12): 40, (31, 12): 39, (32, 12): 38, (33, 12): 37, (34, 12): 36, (35, 12): 35, (36, 12): 34, (37, 12): 33, (38, 12): 32, (39, 12): 31, (40, 12): 30, (41, 12): 29, (42, 12): 28, (43, 12): 27, (44, 12): 26, (45, 12): 25, (46, 12): 24, (47, 12): 23, (0, 13): 69, (1, 13): 68, (2, 13): 67, (3, 13): 66, (4, 13): 65, (5, 13): 64, (6, 13): 63, (7, 13): 62, (8, 13): 61, (9, 13): 60, (10, 13): 59, (11, 13): 58, (12, 13): 57, (13, 13): 56, (14, 13): 55, (15, 13): 54, (16, 13): 53, (17, 13): 52, (18, 13): 51, (19, 13): 50, (20, 13): 49, (21, 13): 48, (22, 13): 47, (23, 13): 46, (24, 13): 45, (25, 13): 44, (26, 13): 43, (27, 13): 42, (28, 13): 41, (29, 13): 40, (30, 13): 39, (31, 13): 38, (32, 13): 37, (33, 13): 36, (34, 13): 35, (35, 13): 34, (36, 13): 33, (37, 13): 32, (38, 13): 31, (39, 13): 30, (40, 13): 29, (41, 13): 28, (42, 13): 27, (43, 13): 26, (44, 13): 25, (45, 13): 24, (46, 13): 23, (47, 13): 22, (0, 14): 68, (1, 14): 67, (2, 14): 66, (3, 14): 65, (4, 14): 64, (5, 14): 63, (6, 14): 62, (7, 14): 61, (8, 14): 60, (9, 14): 59, (10, 14): 58, (11, 14): 57, (12, 14): 56, (13, 14): 55, (14, 14): 54, (15, 14): 53, (16, 14): 52, (17, 14): 51, (18, 14): 50, (19, 14): 49, (20, 14): 48, (21, 14): 47, (22, 14): 46, (23, 14): 45, (24, 14): 44, (25, 14): 43, (26, 14): 42, (27, 14): 41, (28, 14): 40, (29, 14): 39, (30, 14): 38, (31, 14): 37, (32, 14): 36, (33, 14): 35, (34, 14): 34, (35, 14): 33, (36, 14): 32, (37, 14): 31, (38, 14): 30, (39, 14): 29, (40, 14): 28, (41, 14): 27, (42, 14): 26, (43, 14): 25, (44, 14): 24, (45, 14): 23, (46, 14): 22, (47, 14): 21, (0, 15): 67, (1, 15): 66, (2, 15): 65, (3, 15): 64, (4, 15): 63, (5, 15): 62, (6, 15): 61, (7, 15): 60, (8, 15): 59, (9, 15): 58, (10, 15): 57, (11, 15): 56, (12, 15): 55, (13, 15): 54, (14, 15): 53, (15, 15): 52, (16, 15): 51, (17, 15): 50, (18, 15): 49, (19, 15): 48, (20, 15): 47, (21, 15): 46, (22, 15): 45, (23, 15): 44, (24, 15): 43, (25, 15): 42, (26, 15): 41, (27, 15): 40, (28, 15): 39, (29, 15): 38, (30, 15): 37, (31, 15): 36, (32, 15): 35, (33, 15): 34, (34, 15): 33, (35, 15): 32, (36, 15): 31, (37, 15): 30, (38, 15): 29, (39, 15): 28, (40, 15): 27, (41, 15): 26, (42, 15): 25, (43, 15): 24, (44, 15): 23, (45, 15): 22, (46, 15): 21, (47, 15): 20, (0, 16): 66, (1, 16): 65, (2, 16): 64, (3, 16): 63, (4, 16): 62, (5, 16): 61, (6, 16): 60, (7, 16): 59, (8, 16): 58, (9, 16): 57, (10, 16): 56, (11, 16): 55, (12, 16): 54, (13, 16): 53, (14, 16): 52, (15, 16): 51, (16, 16): 50, (17, 16): 49, (18, 16): 48, (19, 16): 47, (20, 16): 46, (21, 16): 45, (22, 16): 44, (23, 16): 43, (24, 16): 42, (25, 16): 41, (26, 16): 40, (27, 16): 39, (28, 16): 38, (29, 16): 37, (30, 16): 36, (31, 16): 35, (32, 16): 34, (33, 16): 33, (34, 16): 32, (35, 16): 31, (36, 16): 30, (37, 16): 29, (38, 16): 28, (39, 16): 27, (40, 16): 26, (41, 16): 25, (42, 16): 24, (43, 16): 23, (44, 16): 22, (45, 16): 21, (46, 16): 20, (47, 16): 19, (0, 17): 65, (1, 17): 64, (2, 17): 63, (3, 17): 62, (4, 17): 61, (5, 17): 60, (6, 17): 59, (7, 17): 58, (8, 17): 57, (9, 17): 56, (10, 17): 55, (11, 17): 54, (12, 17): 53, (13, 17): 52, (14, 17): 51, (15, 17): 50, (16, 17): 49, (17, 17): 48, (18, 17): 47, (19, 17): 46, (20, 17): 45, (21, 17): 44, (22, 17): 43, (23, 17): 42, (24, 17): 41, (25, 17): 40, (26, 17): 39, (27, 17): 38, (28, 17): 37, (29, 17): 36, (30, 17): 35, (31, 17): 34, (32, 17): 33, (33, 17): 32, (34, 17): 31, (35, 17): 30, (36, 17): 29, (37, 17): 28, (38, 17): 27, (39, 17): 26, (40, 17): 25, (41, 17): 24, (42, 17): 23, (43, 17): 22, (44, 17): 21, (45, 17): 20, (46, 17): 19, (47, 17): 18, (0, 18): 64, (1, 18): 63, (2, 18): 62, (3, 18): 61, (4, 18): 60, (5, 18): 59, (6, 18): 58, (7, 18): 57, (8, 18): 56, (9, 18): 55, (10, 18): 54, (11, 18): 53, (12, 18): 52, (13, 18): 51, (14, 18): 50, (15, 18): 49, (16, 18): 48, (17, 18): 47, (18, 18): 46, (19, 18): 45, (20, 18): 44, (21, 18): 43, (22, 18): 42, (23, 18): 41, (24, 18): 40, (25, 18): 39, (26, 18): 38, (27, 18): 37, (28, 18): 36, (29, 18): 35, (30, 18): 34, (31, 18): 33, (32, 18): 32, (33, 18): 31, (34, 18): 30, (35, 18): 29, (36, 18): 28, (37, 18): 27, (38, 18): 26, (39, 18): 25, (40, 18): 24, (41, 18): 23, (42, 18): 22, (43, 18): 21, (44, 18): 20, (45, 18): 19, (46, 18): 18, (47, 18): 17, (0, 19): 63, (1, 19): 62, (2, 19): 61, (3, 19): 60, (4, 19): 59, (5, 19): 58, (6, 19): 57, (7, 19): 56, (8, 19): 55, (9, 19): 54, (10, 19): 53, (11, 19): 52, (12, 19): 51, (13, 19): 50, (14, 19): 49, (15, 19): 48, (16, 19): 47, (17, 19): 46, (18, 19): 45, (19, 19): 44, (20, 19): 43, (21, 19): 42, (22, 19): 41, (23, 19): 40, (24, 19): 39, (25, 19): 38, (26, 19): 37, (27, 19): 36, (28, 19): 35, (29, 19): 34, (30, 19): 33, (31, 19): 32, (32, 19): 31, (33, 19): 30, (34, 19): 29, (35, 19): 28, (36, 19): 27, (37, 19): 26, (38, 19): 25, (39, 19): 24, (40, 19): 23, (41, 19): 22, (42, 19): 21, (43, 19): 20, (44, 19): 19, (45, 19): 18, (46, 19): 17, (47, 19): 16, (0, 20): 62, (1, 20): 61, (2, 20): 60, (3, 20): 59, (4, 20): 58, (5, 20): 57, (6, 20): 56, (7, 20): 55, (8, 20): 54, (9, 20): 53, (10, 20): 52, (11, 20): 51, (12, 20): 50, (13, 20): 49, (14, 20): 48, (15, 20): 47, (16, 20): 46, (17, 20): 45, (18, 20): 44, (19, 20): 43, (20, 20): 42, (21, 20): 41, (22, 20): 40, (23, 20): 39, (24, 20): 38, (25, 20): 37, (26, 20): 36, (27, 20): 35, (28, 20): 34, (29, 20): 33, (30, 20): 32, (31, 20): 31, (32, 20): 30, (33, 20): 29, (34, 20): 28, (35, 20): 27, (36, 20): 26, (37, 20): 25, (38, 20): 24, (39, 20): 23, (40, 20): 22, (41, 20): 21, (42, 20): 20, (43, 20): 19, (44, 20): 18, (45, 20): 17, (46, 20): 16, (47, 20): 15, (0, 21): 61, (1, 21): 60, (2, 21): 59, (3, 21): 58, (4, 21): 57, (5, 21): 56, (6, 21): 55, (7, 21): 54, (8, 21): 53, (9, 21): 52, (10, 21): 51, (11, 21): 50, (12, 21): 49, (13, 21): 48, (14, 21): 47, (15, 21): 46, (16, 21): 45, (17, 21): 44, (18, 21): 43, (19, 21): 42, (20, 21): 41, (21, 21): 40, (22, 21): 39, (23, 21): 38, (24, 21): 37, (25, 21): 36, (26, 21): 35, (27, 21): 34, (28, 21): 33, (29, 21): 32, (30, 21): 31, (31, 21): 30, (32, 21): 29, (33, 21): 28, (34, 21): 27, (35, 21): 26, (36, 21): 25, (37, 21): 24, (38, 21): 23, (39, 21): 22, (40, 21): 21, (41, 21): 20, (42, 21): 19, (43, 21): 18, (44, 21): 17, (45, 21): 16, (46, 21): 15, (47, 21): 14, (0, 22): 60, (1, 22): 59, (2, 22): 58, (3, 22): 57, (4, 22): 56, (5, 22): 55, (6, 22): 54, (7, 22): 53, (8, 22): 52, (9, 22): 51, (10, 22): 50, (11, 22): 49, (12, 22): 48, (13, 22): 47, (14, 22): 46, (15, 22): 45, (16, 22): 44, (17, 22): 43, (18, 22): 42, (19, 22): 41, (20, 22): 40, (21, 22): 39, (22, 22): 38, (23, 22): 37, (24, 22): 36, (25, 22): 35, (26, 22): 34, (27, 22): 33, (28, 22): 32, (29, 22): 31, (30, 22): 30, (31, 22): 29, (32, 22): 28, (33, 22): 27, (34, 22): 26, (35, 22): 25, (36, 22): 24, (37, 22): 23, (38, 22): 22, (39, 22): 21, (40, 22): 20, (41, 22): 19, (42, 22): 18, (43, 22): 17, (44, 22): 16, (45, 22): 15, (46, 22): 14, (47, 22): 13, (0, 23): 59, (1, 23): 58, (2, 23): 57, (3, 23): 56, (4, 23): 55, (5, 23): 54, (6, 23): 53, (7, 23): 52, (8, 23): 51, (9, 23): 50, (10, 23): 49, (11, 23): 48, (12, 23): 47, (13, 23): 46, (14, 23): 45, (15, 23): 44, (16, 23): 43, (17, 23): 42, (18, 23): 41, (19, 23): 40, (20, 23): 39, (21, 23): 38, (22, 23): 37, (23, 23): 36, (24, 23): 35, (25, 23): 34, (26, 23): 33, (27, 23): 32, (28, 23): 31, (29, 23): 30, (30, 23): 29, (31, 23): 28, (32, 23): 27, (33, 23): 26, (34, 23): 25, (35, 23): 24, (36, 23): 23, (37, 23): 22, (38, 23): 21, (39, 23): 20, (40, 23): 19, (41, 23): 18, (42, 23): 17, (43, 23): 16, (44, 23): 15, (45, 23): 14, (46, 23): 13, (47, 23): 12, (0, 24): 58, (1, 24): 57, (2, 24): 56, (3, 24): 55, (4, 24): 54, (5, 24): 53, (6, 24): 52, (7, 24): 51, (8, 24): 50, (9, 24): 49, (10, 24): 48, (11, 24): 47, (12, 24): 46, (13, 24): 45, (14, 24): 44, (15, 24): 43, (16, 24): 42, (17, 24): 41, (18, 24): 40, (19, 24): 39, (20, 24): 38, (21, 24): 37, (22, 24): 36, (23, 24): 35, (24, 24): 34, (25, 24): 33, (26, 24): 32, (27, 24): 31, (28, 24): 30, (29, 24): 29, (30, 24): 28, (31, 24): 27, (32, 24): 26, (33, 24): 25, (34, 24): 24, (35, 24): 23, (36, 24): 22, (37, 24): 21, (38, 24): 20, (39, 24): 19, (40, 24): 18, (41, 24): 17, (42, 24): 16, (43, 24): 15, (44, 24): 14, (45, 24): 13, (46, 24): 12, (47, 24): 11, (0, 25): 57, (1, 25): 56, (2, 25): 55, (3, 25): 54, (4, 25): 53, (5, 25): 52, (6, 25): 51, (7, 25): 50, (8, 25): 49, (9, 25): 48, (10, 25): 47, (11, 25): 46, (12, 25): 45, (13, 25): 44, (14, 25): 43, (15, 25): 42, (16, 25): 41, (17, 25): 40, (18, 25): 39, (19, 25): 38, (20, 25): 37, (21, 25): 36, (22, 25): 35, (23, 25): 34, (24, 25): 33, (25, 25): 32, (26, 25): 31, (27, 25): 30, (28, 25): 29, (29, 25): 28, (30, 25): 27, (31, 25): 26, (32, 25): 25, (33, 25): 24, (34, 25): 23, (35, 25): 22, (36, 25): 21, (37, 25): 20, (38, 25): 19, (39, 25): 18, (40, 25): 17, (41, 25): 16, (42, 25): 15, (43, 25): 14, (44, 25): 13, (45, 25): 12, (46, 25): 11, (47, 25): 10, (0, 26): 56, (1, 26): 55, (2, 26): 54, (3, 26): 53, (4, 26): 52, (5, 26): 51, (6, 26): 50, (7, 26): 49, (8, 26): 48, (9, 26): 47, (10, 26): 46, (11, 26): 45, (12, 26): 44, (13, 26): 43, (14, 26): 42, (15, 26): 41, (16, 26): 40, (17, 26): 39, (18, 26): 38, (19, 26): 37, (20, 26): 36, (21, 26): 35, (22, 26): 34, (23, 26): 33, (24, 26): 32, (25, 26): 31, (26, 26): 30, (27, 26): 29, (28, 26): 28, (29, 26): 27, (30, 26): 26, (31, 26): 25, (32, 26): 24, (33, 26): 23, (34, 26): 22, (35, 26): 21, (36, 26): 20, (37, 26): 19, (38, 26): 18, (39, 26): 17, (40, 26): 16, (41, 26): 15, (42, 26): 14, (43, 26): 13, (44, 26): 12, (45, 26): 11, (46, 26): 10, (47, 26): 9, (0, 27): 55, (1, 27): 54, (2, 27): 53, (3, 27): 52, (4, 27): 51, (5, 27): 50, (6, 27): 49, (7, 27): 48, (8, 27): 47, (9, 27): 46, (10, 27): 45, (11, 27): 44, (12, 27): 43, (13, 27): 42, (14, 27): 41, (15, 27): 40, (16, 27): 39, (17, 27): 38, (18, 27): 37, (19, 27): 36, (20, 27): 35, (21, 27): 34, (22, 27): 33, (23, 27): 32, (24, 27): 31, (25, 27): 30, (26, 27): 29, (27, 27): 28, (28, 27): 27, (29, 27): 26, (30, 27): 25, (31, 27): 24, (32, 27): 23, (33, 27): 22, (34, 27): 21, (35, 27): 20, (36, 27): 19, (37, 27): 18, (38, 27): 17, (39, 27): 16, (40, 27): 15, (41, 27): 14, (42, 27): 13, (43, 27): 12, (44, 27): 11, (45, 27): 10, (46, 27): 9, (47, 27): 8, (0, 28): 54, (1, 28): 53, (2, 28): 52, (3, 28): 51, (4, 28): 50, (5, 28): 49, (6, 28): 48, (7, 28): 47, (8, 28): 46, (9, 28): 45, (10, 28): 44, (11, 28): 43, (12, 28): 42, (13, 28): 41, (14, 28): 40, (15, 28): 39, (16, 28): 38, (17, 28): 37, (18, 28): 36, (19, 28): 35, (20, 28): 34, (21, 28): 33, (22, 28): 32, (23, 28): 31, (24, 28): 30, (25, 28): 29, (26, 28): 28, (27, 28): 27, (28, 28): 26, (29, 28): 25, (30, 28): 24, (31, 28): 23, (32, 28): 22, (33, 28): 21, (34, 28): 20, (35, 28): 19, (36, 28): 18, (37, 28): 17, (38, 28): 16, (39, 28): 15, (40, 28): 14, (41, 28): 13, (42, 28): 12, (43, 28): 11, (44, 28): 10, (45, 28): 9, (46, 28): 8, (47, 28): 7, (0, 29): 55, (1, 29): 54, (2, 29): 53, (3, 29): 52, (4, 29): 51, (5, 29): 50, (6, 29): 49, (7, 29): 48, (8, 29): 47, (9, 29): 46, (10, 29): 45, (11, 29): 44, (12, 29): 43, (13, 29): 42, (14, 29): 41, (15, 29): 40, (16, 29): 39, (17, 29): 38, (18, 29): 37, (19, 29): 36, (20, 29): 35, (21, 29): 34, (22, 29): 33, (23, 29): 32, (24, 29): 31, (25, 29): 30, (26, 29): 29, (27, 29): 28, (28, 29): 27, (29, 29): 26, (30, 29): 25, (31, 29): 24, (32, 29): 23, (33, 29): 22, (34, 29): 21, (35, 29): 20, (36, 29): 19, (37, 29): 18, (38, 29): 17, (39, 29): 16, (40, 29): 15, (41, 29): 14, (42, 29): 13, (43, 29): 12, (44, 29): 11, (45, 29): 10, (46, 29): 9, (47, 29): 8, (0, 30): 56, (1, 30): 55, (2, 30): 54, (3, 30): 53, (4, 30): 52, (5, 30): 51, (6, 30): 50, (7, 30): 49, (8, 30): 48, (9, 30): 47, (10, 30): 46, (11, 30): 45, (12, 30): 44, (13, 30): 43, (14, 30): 42, (15, 30): 41, (16, 30): 40, (17, 30): 39, (18, 30): 38, (19, 30): 37, (20, 30): 36, (21, 30): 35, (22, 30): 34, (23, 30): 33, (24, 30): 32, (25, 30): 31, (26, 30): 30, (27, 30): 29, (28, 30): 28, (29, 30): 27, (30, 30): 26, (31, 30): 25, (32, 30): 24, (33, 30): 23, (34, 30): 22, (35, 30): 21, (36, 30): 20, (37, 30): 19, (38, 30): 18, (39, 30): 17, (40, 30): 16, (41, 30): 15, (42, 30): 14, (43, 30): 13, (44, 30): 12, (45, 30): 11, (46, 30): 10, (47, 30): 9, (0, 31): 57, (1, 31): 56, (2, 31): 55, (3, 31): 54, (4, 31): 53, (5, 31): 52, (6, 31): 51, (7, 31): 50, (8, 31): 49, (9, 31): 48, (10, 31): 47, (11, 31): 46, (12, 31): 45, (13, 31): 44, (14, 31): 43, (15, 31): 42, (16, 31): 41, (17, 31): 40, (18, 31): 39, (19, 31): 38, (20, 31): 37, (21, 31): 36, (22, 31): 35, (23, 31): 34, (24, 31): 33, (25, 31): 32, (26, 31): 31, (27, 31): 30, (28, 31): 29, (29, 31): 28, (30, 31): 27, (31, 31): 26, (32, 31): 25, (33, 31): 24, (34, 31): 23, (35, 31): 22, (36, 31): 21, (37, 31): 20, (38, 31): 19, (39, 31): 18, (40, 31): 17, (41, 31): 16, (42, 31): 15, (43, 31): 14, (44, 31): 13, (45, 31): 12, (46, 31): 11, (47, 31): 10, (0, 32): 58, (1, 32): 57, (2, 32): 56, (3, 32): 55, (4, 32): 54, (5, 32): 53, (6, 32): 52, (7, 32): 51, (8, 32): 50, (9, 32): 49, (10, 32): 48, (11, 32): 47, (12, 32): 46, (13, 32): 45, (14, 32): 44, (15, 32): 43, (16, 32): 42, (17, 32): 41, (18, 32): 40, (19, 32): 39, (20, 32): 38, (21, 32): 37, (22, 32): 36, (23, 32): 35, (24, 32): 34, (25, 32): 33, (26, 32): 32, (27, 32): 31, (28, 32): 30, (29, 32): 29, (30, 32): 28, (31, 32): 27, (32, 32): 26, (33, 32): 25, (34, 32): 24, (35, 32): 23, (36, 32): 22, (37, 32): 21, (38, 32): 20, (39, 32): 19, (40, 32): 18, (41, 32): 17, (42, 32): 16, (43, 32): 15, (44, 32): 14, (45, 32): 13, (46, 32): 12, (47, 32): 11, (0, 33): 59, (1, 33): 58, (2, 33): 57, (3, 33): 56, (4, 33): 55, (5, 33): 54, (6, 33): 53, (7, 33): 52, (8, 33): 51, (9, 33): 50, (10, 33): 49, (11, 33): 48, (12, 33): 47, (13, 33): 46, (14, 33): 45, (15, 33): 44, (16, 33): 43, (17, 33): 42, (18, 33): 41, (19, 33): 40, (20, 33): 39, (21, 33): 38, (22, 33): 37, (23, 33): 36, (24, 33): 35, (25, 33): 34, (26, 33): 33, (27, 33): 32, (28, 33): 31, (29, 33): 30, (30, 33): 29, (31, 33): 28, (32, 33): 27, (33, 33): 26, (34, 33): 25, (35, 33): 24, (36, 33): 23, (37, 33): 22, (38, 33): 21, (39, 33): 20, (40, 33): 19, (41, 33): 18, (42, 33): 17, (43, 33): 16, (44, 33): 15, (45, 33): 14, (46, 33): 13, (47, 33): 12, (0, 34): 60, (1, 34): 59, (2, 34): 58, (3, 34): 57, (4, 34): 56, (5, 34): 55, (6, 34): 54, (7, 34): 53, (8, 34): 52, (9, 34): 51, (10, 34): 50, (11, 34): 49, (12, 34): 48, (13, 34): 47, (14, 34): 46, (15, 34): 45, (16, 34): 44, (17, 34): 43, (18, 34): 42, (19, 34): 41, (20, 34): 40, (21, 34): 39, (22, 34): 38, (23, 34): 37, (24, 34): 36, (25, 34): 35, (26, 34): 34, (27, 34): 33, (28, 34): 32, (29, 34): 31, (30, 34): 30, (31, 34): 29, (32, 34): 28, (33, 34): 27, (34, 34): 26, (35, 34): 25, (36, 34): 24, (37, 34): 23, (38, 34): 22, (39, 34): 21, (40, 34): 20, (41, 34): 19, (42, 34): 18, (43, 34): 17, (44, 34): 16, (45, 34): 15, (46, 34): 14, (47, 34): 13, (0, 35): 61, (1, 35): 60, (2, 35): 59, (3, 35): 58, (4, 35): 57, (5, 35): 56, (6, 35): 55, (7, 35): 54, (8, 35): 53, (9, 35): 52, (10, 35): 51, (11, 35): 50, (12, 35): 49, (13, 35): 48, (14, 35): 47, (15, 35): 46, (16, 35): 45, (17, 35): 44, (18, 35): 43, (19, 35): 42, (20, 35): 41, (21, 35): 40, (22, 35): 39, (23, 35): 38, (24, 35): 37, (25, 35): 36, (26, 35): 35, (27, 35): 34, (28, 35): 33, (29, 35): 32, (30, 35): 31, (31, 35): 30, (32, 35): 29, (33, 35): 28, (34, 35): 27, (35, 35): 26, (36, 35): 25, (37, 35): 24, (38, 35): 23, (39, 35): 22, (40, 35): 21, (41, 35): 20, (42, 35): 19, (43, 35): 18, (44, 35): 17, (45, 35): 16, (46, 35): 15, (47, 35): 14, (0, 36): 62, (1, 36): 61, (2, 36): 60, (3, 36): 59, (4, 36): 58, (5, 36): 57, (6, 36): 56, (7, 36): 55, (8, 36): 54, (9, 36): 53, (10, 36): 52, (11, 36): 51, (12, 36): 50, (13, 36): 49, (14, 36): 48, (15, 36): 47, (16, 36): 46, (17, 36): 45, (18, 36): 44, (19, 36): 43, (20, 36): 42, (21, 36): 41, (22, 36): 40, (23, 36): 39, (24, 36): 38, (25, 36): 37, (26, 36): 36, (27, 36): 35, (28, 36): 34, (29, 36): 33, (30, 36): 32, (31, 36): 31, (32, 36): 30, (33, 36): 29, (34, 36): 28, (35, 36): 27, (36, 36): 26, (37, 36): 25, (38, 36): 24, (39, 36): 23, (40, 36): 22, (41, 36): 21, (42, 36): 20, (43, 36): 19, (44, 36): 18, (45, 36): 17, (46, 36): 16, (47, 36): 15, (0, 37): 63, (1, 37): 62, (2, 37): 61, (3, 37): 60, (4, 37): 59, (5, 37): 58, (6, 37): 57, (7, 37): 56, (8, 37): 55, (9, 37): 54, (10, 37): 53, (11, 37): 52, (12, 37): 51, (13, 37): 50, (14, 37): 49, (15, 37): 48, (16, 37): 47, (17, 37): 46, (18, 37): 45, (19, 37): 44, (20, 37): 43, (21, 37): 42, (22, 37): 41, (23, 37): 40, (24, 37): 39, (25, 37): 38, (26, 37): 37, (27, 37): 36, (28, 37): 35, (29, 37): 34, (30, 37): 33, (31, 37): 32, (32, 37): 31, (33, 37): 30, (34, 37): 29, (35, 37): 28, (36, 37): 27, (37, 37): 26, (38, 37): 25, (39, 37): 24, (40, 37): 23, (41, 37): 22, (42, 37): 21, (43, 37): 20, (44, 37): 19, (45, 37): 18, (46, 37): 17, (47, 37): 16, (0, 38): 64, (1, 38): 63, (2, 38): 62, (3, 38): 61, (4, 38): 60, (5, 38): 59, (6, 38): 58, (7, 38): 57, (8, 38): 56, (9, 38): 55, (10, 38): 54, (11, 38): 53, (12, 38): 52, (13, 38): 51, (14, 38): 50, (15, 38): 49, (16, 38): 48, (17, 38): 47, (18, 38): 46, (19, 38): 45, (20, 38): 44, (21, 38): 43, (22, 38): 42, (23, 38): 41, (24, 38): 40, (25, 38): 39, (26, 38): 38, (27, 38): 37, (28, 38): 36, (29, 38): 35, (30, 38): 34, (31, 38): 33, (32, 38): 32, (33, 38): 31, (34, 38): 30, (35, 38): 29, (36, 38): 28, (37, 38): 27, (38, 38): 26, (39, 38): 25, (40, 38): 24, (41, 38): 23, (42, 38): 22, (43, 38): 21, (44, 38): 20, (45, 38): 19, (46, 38): 18, (47, 38): 17, (0, 39): 65, (1, 39): 64, (2, 39): 63, (3, 39): 62, (4, 39): 61, (5, 39): 60, (6, 39): 59, (7, 39): 58, (8, 39): 57, (9, 39): 56, (10, 39): 55, (11, 39): 54, (12, 39): 53, (13, 39): 52, (14, 39): 51, (15, 39): 50, (16, 39): 49, (17, 39): 48, (18, 39): 47, (19, 39): 46, (20, 39): 45, (21, 39): 44, (22, 39): 43, (23, 39): 42, (24, 39): 41, (25, 39): 40, (26, 39): 39, (27, 39): 38, (28, 39): 37, (29, 39): 36, (30, 39): 35, (31, 39): 34, (32, 39): 33, (33, 39): 32, (34, 39): 31, (35, 39): 30, (36, 39): 29, (37, 39): 28, (38, 39): 27, (39, 39): 26, (40, 39): 25, (41, 39): 24, (42, 39): 23, (43, 39): 22, (44, 39): 21, (45, 39): 20, (46, 39): 19, (47, 39): 18, (0, 40): 66, (1, 40): 65, (2, 40): 64, (3, 40): 63, (4, 40): 62, (5, 40): 61, (6, 40): 60, (7, 40): 59, (8, 40): 58, (9, 40): 57, (10, 40): 56, (11, 40): 55, (12, 40): 54, (13, 40): 53, (14, 40): 52, (15, 40): 51, (16, 40): 50, (17, 40): 49, (18, 40): 48, (19, 40): 47, (20, 40): 46, (21, 40): 45, (22, 40): 44, (23, 40): 43, (24, 40): 42, (25, 40): 41, (26, 40): 40, (27, 40): 39, (28, 40): 38, (29, 40): 37, (30, 40): 36, (31, 40): 35, (32, 40): 34, (33, 40): 33, (34, 40): 32, (35, 40): 31, (36, 40): 30, (37, 40): 29, (38, 40): 28, (39, 40): 27, (40, 40): 26, (41, 40): 25, (42, 40): 24, (43, 40): 23, (44, 40): 22, (45, 40): 21, (46, 40): 20, (47, 40): 19, (0, 41): 67, (1, 41): 66, (2, 41): 65, (3, 41): 64, (4, 41): 63, (5, 41): 62, (6, 41): 61, (7, 41): 60, (8, 41): 59, (9, 41): 58, (10, 41): 57, (11, 41): 56, (12, 41): 55, (13, 41): 54, (14, 41): 53, (15, 41): 52, (16, 41): 51, (17, 41): 50, (18, 41): 49, (19, 41): 48, (20, 41): 47, (21, 41): 46, (22, 41): 45, (23, 41): 44, (24, 41): 43, (25, 41): 42, (26, 41): 41, (27, 41): 40, (28, 41): 39, (29, 41): 38, (30, 41): 37, (31, 41): 36, (32, 41): 35, (33, 41): 34, (34, 41): 33, (35, 41): 32, (36, 41): 31, (37, 41): 30, (38, 41): 29, (39, 41): 28, (40, 41): 27, (41, 41): 26, (42, 41): 25, (43, 41): 24, (44, 41): 23, (45, 41): 22, (46, 41): 21, (47, 41): 20, (0, 42): 68, (1, 42): 67, (2, 42): 66, (3, 42): 65, (4, 42): 64, (5, 42): 63, (6, 42): 62, (7, 42): 61, (8, 42): 60, (9, 42): 59, (10, 42): 58, (11, 42): 57, (12, 42): 56, (13, 42): 55, (14, 42): 54, (15, 42): 53, (16, 42): 52, (17, 42): 51, (18, 42): 50, (19, 42): 49, (20, 42): 48, (21, 42): 47, (22, 42): 46, (23, 42): 45, (24, 42): 44, (25, 42): 43, (26, 42): 42, (27, 42): 41, (28, 42): 40, (29, 42): 39, (30, 42): 38, (31, 42): 37, (32, 42): 36, (33, 42): 35, (34, 42): 34, (35, 42): 33, (36, 42): 32, (37, 42): 31, (38, 42): 30, (39, 42): 29, (40, 42): 28, (41, 42): 27, (42, 42): 26, (43, 42): 25, (44, 42): 24, (45, 42): 23, (46, 42): 22, (47, 42): 21, (0, 43): 69, (1, 43): 68, (2, 43): 67, (3, 43): 66, (4, 43): 65, (5, 43): 64, (6, 43): 63, (7, 43): 62, (8, 43): 61, (9, 43): 60, (10, 43): 59, (11, 43): 58, (12, 43): 57, (13, 43): 56, (14, 43): 55, (15, 43): 54, (16, 43): 53, (17, 43): 52, (18, 43): 51, (19, 43): 50, (20, 43): 49, (21, 43): 48, (22, 43): 47, (23, 43): 46, (24, 43): 45, (25, 43): 44, (26, 43): 43, (27, 43): 42, (28, 43): 41, (29, 43): 40, (30, 43): 39, (31, 43): 38, (32, 43): 37, (33, 43): 36, (34, 43): 35, (35, 43): 34, (36, 43): 33, (37, 43): 32, (38, 43): 31, (39, 43): 30, (40, 43): 29, (41, 43): 28, (42, 43): 27, (43, 43): 26, (44, 43): 25, (45, 43): 24, (46, 43): 23, (47, 43): 22, (0, 44): 70, (1, 44): 69, (2, 44): 68, (3, 44): 67, (4, 44): 66, (5, 44): 65, (6, 44): 64, (7, 44): 63, (8, 44): 62, (9, 44): 61, (10, 44): 60, (11, 44): 59, (12, 44): 58, (13, 44): 57, (14, 44): 56, (15, 44): 55, (16, 44): 54, (17, 44): 53, (18, 44): 52, (19, 44): 51, (20, 44): 50, (21, 44): 49, (22, 44): 48, (23, 44): 47, (24, 44): 46, (25, 44): 45, (26, 44): 44, (27, 44): 43, (28, 44): 42, (29, 44): 41, (30, 44): 40, (31, 44): 39, (32, 44): 38, (33, 44): 37, (34, 44): 36, (35, 44): 35, (36, 44): 34, (37, 44): 33, (38, 44): 32, (39, 44): 31, (40, 44): 30, (41, 44): 29, (42, 44): 28, (43, 44): 27, (44, 44): 26, (45, 44): 25, (46, 44): 24, (47, 44): 23, (0, 45): 71, (1, 45): 70, (2, 45): 69, (3, 45): 68, (4, 45): 67, (5, 45): 66, (6, 45): 65, (7, 45): 64, (8, 45): 63, (9, 45): 62, (10, 45): 61, (11, 45): 60, (12, 45): 59, (13, 45): 58, (14, 45): 57, (15, 45): 56, (16, 45): 55, (17, 45): 54, (18, 45): 53, (19, 45): 52, (20, 45): 51, (21, 45): 50, (22, 45): 49, (23, 45): 48, (24, 45): 47, (25, 45): 46, (26, 45): 45, (27, 45): 44, (28, 45): 43, (29, 45): 42, (30, 45): 41, (31, 45): 40, (32, 45): 39, (33, 45): 38, (34, 45): 37, (35, 45): 36, (36, 45): 35, (37, 45): 34, (38, 45): 33, (39, 45): 32, (40, 45): 31, (41, 45): 30, (42, 45): 29, (43, 45): 28, (44, 45): 27, (45, 45): 26, (46, 45): 25, (47, 45): 24, (0, 46): 72, (1, 46): 71, (2, 46): 70, (3, 46): 69, (4, 46): 68, (5, 46): 67, (6, 46): 66, (7, 46): 65, (8, 46): 64, (9, 46): 63, (10, 46): 62, (11, 46): 61, (12, 46): 60, (13, 46): 59, (14, 46): 58, (15, 46): 57, (16, 46): 56, (17, 46): 55, (18, 46): 54, (19, 46): 53, (20, 46): 52, (21, 46): 51, (22, 46): 50, (23, 46): 49, (24, 46): 48, (25, 46): 47, (26, 46): 46, (27, 46): 45, (28, 46): 44, (29, 46): 43, (30, 46): 42, (31, 46): 41, (32, 46): 40, (33, 46): 39, (34, 46): 38, (35, 46): 37, (36, 46): 36, (37, 46): 35, (38, 46): 34, (39, 46): 33, (40, 46): 32, (41, 46): 31, (42, 46): 30, (43, 46): 29, (44, 46): 28, (45, 46): 27, (46, 46): 26, (47, 46): 25}\n"
     ]
    }
   ],
   "source": [
    "## Part2\n",
    "man = {(i,j): abs(i-54) + abs(j-28) for j in range(width) for i in range(height)}\n",
    "euc = {(i,j): math.sqrt((i-54)**2 + (j-28)**2 ) for j in range(width) for i in range(height)}\n",
    "print(man)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6e56e62a",
   "metadata": {},
   "outputs": [],
   "source": [
    "Manhattan_distances = [[0] * 47 for i in range(48)]\n",
    "for k,v in man.items():\n",
    "    i = k[0]\n",
    "    j = k[1]\n",
    "    Manhattan_distances[i][j] = v  \n",
    "\n",
    "outF = open(\"#7 Manhattan_distances_to_the_goal.txt\", \"w\")\n",
    "for i in range(len(Manhattan_distances)):\n",
    "    for j in range(len(Manhattan_distances[i])):\n",
    "        outF.write(str(Manhattan_distances[i][j]))\n",
    "        if j == len(Manhattan_distances[i]) - 1:\n",
    "            break\n",
    "        outF.write(\",\")\n",
    "    if i == len(Manhattan_distances) - 1:\n",
    "        break\n",
    "    outF.write(\"\\n\")\n",
    "outF.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e39cf804",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]]\n"
     ]
    }
   ],
   "source": [
    "searched_sq_A_man = [[0] * 47 for i in range(48)]\n",
    "# manhattan   use man\n",
    "g = {(i,j): float('inf') for j in range(width) for i in range(height)}\n",
    "g[(0,23)] = 0\n",
    "\n",
    "\n",
    "queue = [(0,23)]\n",
    "visited = set()\n",
    "\n",
    "while queue and (47,23) not in visited:\n",
    "    queue.sort(key=lambda x: g[x] + man[x])\n",
    "    point = queue.pop(0)\n",
    "    if point not in visited:\n",
    "        visited.add(point)\n",
    "        i, j = point[0], point[1]\n",
    "        searched_sq_A_man[i][j] = 1\n",
    "        succ = cells[i][j].succ\n",
    "        if 'U' in succ and (i-1,j) not in visited:\n",
    "            if (i-1,j) not in queue: queue += [(i-1,j)]\n",
    "            g[(i-1,j)] = min(g[(i-1,j)], g[(i,j)]+1)\n",
    "        if 'D' in succ and (i+1,j) not in visited:\n",
    "            if (i+1,j) not in queue: queue += [(i+1,j)]\n",
    "            g[(i+1,j)] = min(g[(i+1,j)], g[(i,j)]+1)\n",
    "        if 'L' in succ and (i,j-1) not in visited:\n",
    "            if (i,j-1) not in queue: queue += [(i,j-1)]\n",
    "            g[(i,j-1)] = min(g[(i,j-1)], g[(i,j)]+1)\n",
    "        if 'R' in succ and (i,j+1) not in visited:\n",
    "            if (i,j+1) not in queue: queue += [(i,j+1)]\n",
    "            g[(i,j+1)] = min(g[(i,j+1)], g[(i,j)]+1)    \n",
    "\n",
    "print(searched_sq_A_man)           \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ae90726c",
   "metadata": {},
   "outputs": [],
   "source": [
    "outF = open(\"#8 squares_searched_by_A_man.txt\", \"w\")\n",
    "for i in range(len(searched_sq_A_man)):\n",
    "    for j in range(len(searched_sq_A_man[i])):\n",
    "        outF.write(str(searched_sq_A_man[i][j]))\n",
    "        if j == len(searched_sq_A_man[i]) - 1:\n",
    "            break\n",
    "        outF.write(\",\")\n",
    "    if i == len(searched_sq_A_man) - 1:\n",
    "        break\n",
    "    outF.write(\"\\n\")\n",
    "outF.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "422f5562",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]]\n"
     ]
    }
   ],
   "source": [
    "searched_sq_A_euc = [[0] * 47 for i in range(48)]\n",
    "# use euc\n",
    "g = {(i,j): float('inf') for j in range(width) for i in range(height)}\n",
    "g[(0,23)] = 0\n",
    "\n",
    "\n",
    "queue = [(0,23)]\n",
    "visited = set()\n",
    "\n",
    "while queue and (47,23) not in visited:\n",
    "    queue.sort(key=lambda x: g[x] + euc[x])\n",
    "    point = queue.pop(0)\n",
    "    if point not in visited:\n",
    "        visited.add(point)\n",
    "        i, j = point[0], point[1]\n",
    "        searched_sq_A_euc[i][j] = 1\n",
    "        succ = cells[i][j].succ\n",
    "        if 'U' in succ and (i-1,j) not in visited:\n",
    "            if (i-1,j) not in queue: queue += [(i-1,j)]\n",
    "            g[(i-1,j)] = min(g[(i-1,j)], g[(i,j)]+1)\n",
    "        if 'D' in succ and (i+1,j) not in visited:\n",
    "            if (i+1,j) not in queue: queue += [(i+1,j)]\n",
    "            g[(i+1,j)] = min(g[(i+1,j)], g[(i,j)]+1)\n",
    "        if 'L' in succ and (i,j-1) not in visited:\n",
    "            if (i,j-1) not in queue: queue += [(i,j-1)]\n",
    "            g[(i,j-1)] = min(g[(i,j-1)], g[(i,j)]+1)\n",
    "        if 'R' in succ and (i,j+1) not in visited:\n",
    "            if (i,j+1) not in queue: queue += [(i,j+1)]\n",
    "            g[(i,j+1)] = min(g[(i,j+1)], g[(i,j)]+1)    \n",
    "\n",
    "print(searched_sq_A_euc)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d2c388ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "outF = open(\"#9 squares_searched_by_A_euc.txt\", \"w\")\n",
    "for i in range(len(searched_sq_A_euc)):\n",
    "    for j in range(len(searched_sq_A_euc[i])):\n",
    "        outF.write(str(searched_sq_A_euc[i][j]))\n",
    "        if j == len(searched_sq_A_euc[i]) - 1:\n",
    "            break\n",
    "        outF.write(\",\")\n",
    "    if i == len(searched_sq_A_euc) - 1:\n",
    "        break\n",
    "    outF.write(\"\\n\")\n",
    "outF.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "116f1433",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
